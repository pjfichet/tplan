import unittest
import os
from tplan import parser

class TestPlan(unittest.TestCase):

	def setUp(self):
		path = os.path.dirname(__file__)
		filepath = os.path.join(path, "test.tr")
		p = parser.Parser(debug=True)
		with open(filepath, 'r') as f:
			p.parse(f)	
		self.bp = p.bp

	def test_plan(self):
		self.assertEqual(self.bp.nom, 'Test')
		self.assertEqual(self.bp.duree, 3)
		self.assertEqual(self.bp.annee, 2020)
		self.assertEqual(self.bp.mois, 4)

	def test_produit(self):
		self.assertEqual(self.bp.produit[0].nom, "Produit sans délai")
		self.assertEqual(self.bp.produit[0].annee, 1)
		self.assertEqual(self.bp.produit[0].chiffre_affaire, 100000)
		self.assertEqual(self.bp.produit[0].tva, 0.20)
		self.assertEqual(self.bp.produit[0].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[0].delai_fournisseur, 0)
		self.assertEqual(self.bp.produit[0].delai_client, 0)
		self.assertEqual(self.bp.produit[0].achats, [10000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[0].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

		self.assertEqual(self.bp.produit[1].nom, "Produit sans délai")
		self.assertEqual(self.bp.produit[1].annee, 2)
		self.assertEqual(self.bp.produit[1].chiffre_affaire, 100000)
		self.assertEqual(self.bp.produit[1].tva, 0.20)
		self.assertEqual(self.bp.produit[1].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[1].delai_fournisseur, 0)
		self.assertEqual(self.bp.produit[1].delai_client, 0)
		self.assertEqual(self.bp.produit[1].achats, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[1].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

		self.assertEqual(self.bp.produit[2].nom, "Produit sans délai")
		self.assertEqual(self.bp.produit[2].annee, 3)
		self.assertEqual(self.bp.produit[2].chiffre_affaire, 100000)
		self.assertEqual(self.bp.produit[2].tva, 0.20)
		self.assertEqual(self.bp.produit[2].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[2].delai_fournisseur, 0)
		self.assertEqual(self.bp.produit[2].delai_client, 0)
		self.assertEqual(self.bp.produit[2].achats, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[2].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

		self.assertEqual(self.bp.produit[3].nom, "Produit avec délai fournisseur")
		self.assertEqual(self.bp.produit[3].annee, 1)
		self.assertEqual(self.bp.produit[3].chiffre_affaire, 1000)
		self.assertEqual(self.bp.produit[3].tva, 0.20)
		self.assertEqual(self.bp.produit[3].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[3].delai_fournisseur, 60)
		self.assertEqual(self.bp.produit[3].delai_client, 0)
		self.assertEqual(self.bp.produit[3].achats, [1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[3].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

		self.assertEqual(self.bp.produit[4].nom, "Produit avec délai fournisseur")
		self.assertEqual(self.bp.produit[4].annee, 2)
		self.assertEqual(self.bp.produit[4].chiffre_affaire, 1000)
		self.assertEqual(self.bp.produit[4].tva, 0.20)
		self.assertEqual(self.bp.produit[4].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[4].delai_fournisseur, 60)
		self.assertEqual(self.bp.produit[4].delai_client, 0)
		self.assertEqual(self.bp.produit[4].achats, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[4].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

		self.assertEqual(self.bp.produit[5].nom, "Produit avec délai fournisseur")
		self.assertEqual(self.bp.produit[5].annee, 3)
		self.assertEqual(self.bp.produit[5].chiffre_affaire, 1000)
		self.assertEqual(self.bp.produit[5].tva, 0.20)
		self.assertEqual(self.bp.produit[5].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[5].delai_fournisseur, 60)
		self.assertEqual(self.bp.produit[5].delai_client, 0)
		self.assertEqual(self.bp.produit[5].achats, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[5].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

		self.assertEqual(self.bp.produit[6].nom, "Produit avec délai client")
		self.assertEqual(self.bp.produit[6].annee, 1)
		self.assertEqual(self.bp.produit[6].chiffre_affaire, 3000)
		self.assertEqual(self.bp.produit[6].tva, 0.20)
		self.assertEqual(self.bp.produit[6].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[6].delai_fournisseur, 0)
		self.assertEqual(self.bp.produit[6].delai_client, 45)
		self.assertEqual(self.bp.produit[6].achats, [1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[6].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

		self.assertEqual(self.bp.produit[7].nom, "Produit avec délai client")
		self.assertEqual(self.bp.produit[7].annee, 2)
		self.assertEqual(self.bp.produit[7].chiffre_affaire, 3000)
		self.assertEqual(self.bp.produit[7].tva, 0.20)
		self.assertEqual(self.bp.produit[7].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[7].delai_fournisseur, 0)
		self.assertEqual(self.bp.produit[7].delai_client, 45)
		self.assertEqual(self.bp.produit[7].achats, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[7].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

		self.assertEqual(self.bp.produit[8].nom, "Produit avec délai client")
		self.assertEqual(self.bp.produit[8].annee, 3)
		self.assertEqual(self.bp.produit[8].chiffre_affaire, 3000)
		self.assertEqual(self.bp.produit[8].tva, 0.20)
		self.assertEqual(self.bp.produit[8].prix_achat, 0.50)
		self.assertEqual(self.bp.produit[8].delai_fournisseur, 0)
		self.assertEqual(self.bp.produit[8].delai_client, 45)
		self.assertEqual(self.bp.produit[8].achats, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.produit[8].ventes, [0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])


	def test_personnel(self):
		self.assertEqual(self.bp.personnel[0].nom, "Salarié")
		self.assertEqual(self.bp.personnel[0].annee, 1)
		self.assertEqual(self.bp.personnel[0].etp, 1)
		self.assertEqual(self.bp.personnel[0].embauche, 1)
		self.assertEqual(self.bp.personnel[0].salaire_brut, 2000)
		self.assertEqual(self.bp.personnel[0].charges_salariales, 0.22)
		self.assertEqual(self.bp.personnel[0].charges_patronales, 0.45)
		self.assertEqual(self.bp.personnel[1].nom, "Salarié")
		self.assertEqual(self.bp.personnel[1].annee, 2)
		self.assertEqual(self.bp.personnel[1].etp, 1)
		self.assertEqual(self.bp.personnel[1].embauche, 1)
		self.assertEqual(self.bp.personnel[1].salaire_brut, 2000)
		self.assertEqual(self.bp.personnel[1].charges_salariales, 0.22)
		self.assertEqual(self.bp.personnel[1].charges_patronales, 0.45)
		self.assertEqual(self.bp.personnel[2].nom, "Salarié")
		self.assertEqual(self.bp.personnel[2].annee, 3)
		self.assertEqual(self.bp.personnel[2].etp, 1)
		self.assertEqual(self.bp.personnel[2].embauche, 1)
		self.assertEqual(self.bp.personnel[2].salaire_brut, 2000)
		self.assertEqual(self.bp.personnel[2].charges_salariales, 0.22)
		self.assertEqual(self.bp.personnel[2].charges_patronales, 0.45)

	def test_frais(self):
		self.assertEqual(self.bp.frais[0].nom, "Frais mensuel")
		self.assertEqual(self.bp.frais[0].annee, 1)
		self.assertEqual(self.bp.frais[0].tva, 0.2)
		self.assertEqual(self.bp.frais[0].calendrier, [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])
		self.assertEqual(self.bp.frais[1].nom, "Frais mensuel")
		self.assertEqual(self.bp.frais[1].annee, 2)
		self.assertEqual(self.bp.frais[1].tva, 0.2)
		self.assertEqual(self.bp.frais[1].calendrier, [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])
		self.assertEqual(self.bp.frais[2].nom, "Frais mensuel")
		self.assertEqual(self.bp.frais[2].annee, 3)
		self.assertEqual(self.bp.frais[2].tva, 0.2)
		self.assertEqual(self.bp.frais[2].calendrier, [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])
		self.assertEqual(self.bp.frais[3].nom, "Frais trimestriel")
		self.assertEqual(self.bp.frais[3].annee, 1)
		self.assertEqual(self.bp.frais[3].tva, 0.2)
		self.assertEqual(self.bp.frais[3].calendrier, [1000, 0, 0, 1000, 0, 0, 1000, 0, 0, 1000, 0, 0])
		self.assertEqual(self.bp.frais[4].nom, "Frais trimestriel")
		self.assertEqual(self.bp.frais[4].annee, 2)
		self.assertEqual(self.bp.frais[4].tva, 0.2)
		self.assertEqual(self.bp.frais[4].calendrier, [1000, 0, 0, 1000, 0, 0, 1000, 0, 0, 1000, 0, 0])
		self.assertEqual(self.bp.frais[5].nom, "Frais trimestriel")
		self.assertEqual(self.bp.frais[5].annee, 3)
		self.assertEqual(self.bp.frais[5].tva, 0.2)
		self.assertEqual(self.bp.frais[5].calendrier, [1000, 0, 0, 1000, 0, 0, 1000, 0, 0, 1000, 0, 0])
		self.assertEqual(self.bp.frais[6].nom, "Frais annuel")
		self.assertEqual(self.bp.frais[6].annee, 1)
		self.assertEqual(self.bp.frais[6].tva, 0.2)
		self.assertEqual(self.bp.frais[6].calendrier, [120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.frais[7].nom, "Frais annuel")
		self.assertEqual(self.bp.frais[7].annee, 2)
		self.assertEqual(self.bp.frais[7].tva, 0.2)
		self.assertEqual(self.bp.frais[7].calendrier, [120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.assertEqual(self.bp.frais[8].nom, "Frais annuel")
		self.assertEqual(self.bp.frais[8].annee, 3)
		self.assertEqual(self.bp.frais[8].tva, 0.2)
		self.assertEqual(self.bp.frais[8].calendrier, [120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

	def test_impot(self):
		self.assertEqual(self.bp.impot[0].nom, "Impôt")
		self.assertEqual(self.bp.impot[0].annee, 1)
		self.assertEqual(self.bp.impot[0].calendrier, [0, 0, 0, 0, 0, 0, 0, 0, 1000, 0, 0, 0])
		self.assertEqual(self.bp.impot[1].nom, "Impôt")
		self.assertEqual(self.bp.impot[1].annee, 2)
		self.assertEqual(self.bp.impot[1].calendrier, [0, 0, 0, 0, 0, 0, 0, 0, 1000, 0, 0, 0])
		self.assertEqual(self.bp.impot[2].nom, "Impôt")
		self.assertEqual(self.bp.impot[2].annee, 3)
		self.assertEqual(self.bp.impot[2].calendrier, [0, 0, 0, 0, 0, 0, 0, 0, 1000, 0, 0, 0])

	def test_investissement(self):
		self.assertEqual(self.bp.investissement[0].nom, "Mobilier")
		self.assertEqual(self.bp.investissement[0].annee, 1)
		self.assertEqual(self.bp.investissement[0].duree, 5)
		self.assertEqual(self.bp.investissement[0].tva, 0.2)
		self.assertEqual(self.bp.investissement[0].calendrier, [1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


	def test_capital(self):
		self.assertEqual(self.bp.capital[0].nom, "Capial social")
		self.assertEqual(self.bp.capital[0].annee, 1)
		self.assertEqual(self.bp.capital[0].calendrier, [50000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

	def test_subvention_investissement(self):
		self.assertEqual(self.bp.subvention_investissement[0].nom, "Subvention d'investissement")
		self.assertEqual(self.bp.subvention_investissement[0].annee, 1)
		self.assertEqual(self.bp.subvention_investissement[0].calendrier, [0, 0, 0, 0, 0, 5000, 0, 0, 0, 0, 0, 0])

	def test_subvention_exploitation(self):
		self.assertEqual(self.bp.subvention_exploitation[0].nom, "Subvention d'exploitation")
		self.assertEqual(self.bp.subvention_exploitation[0].annee, 1)
		self.assertEqual(self.bp.subvention_exploitation[0].calendrier, [0, 0, 3000, 0, 0, 0, 0, 0, 0, 0, 0, 0])

	def test_emprunt(self):
		self.assertEqual(self.bp.emprunt[0].nom, "Crédit mutuel")
		self.assertEqual(self.bp.emprunt[0].annee, 1)
		self.assertEqual(self.bp.emprunt[0].mois, 1)
		self.assertEqual(self.bp.emprunt[0].montant, 10000)
		self.assertEqual(self.bp.emprunt[0].duree, 4)
		self.assertEqual(self.bp.emprunt[0].taux, 0.02)
		self.assertEqual(self.bp.emprunt[0].nb_echeances_annuelles, 12)

	def test_set_emprunt(self):
		self.bp.set_emprunt()
		self.assertEqual(self.bp.emprunt[0].mois_debut, 1)
		self.assertEqual(self.bp.emprunt[0].mois_fin, 49)	
		self.assertEqual(self.bp.emprunt[0].nb_echeances, 12*4)
		self.assertEqual(self.bp.emprunt[0].taux_periodique, 0.0016666666666666668)
		self.assertEqual(self.bp.emprunt[0].montant_echeance, 216.95123639339897)

	def test_remboursement(self):
		self.bp.set_emprunt()
		self.assertEqual(self.bp.remboursement[11].nom, "Crédit mutuel")
		self.assertEqual(self.bp.remboursement[11].annee, 1)
		self.assertEqual(self.bp.remboursement[11].mois, 12)
		self.assertEqual(self.bp.remboursement[11].cumul_mois, 12)
		self.assertEqual(self.bp.remboursement[11].nb_echeances_payees, 12)
		self.assertEqual(self.bp.remboursement[11].cumul_capital, 2425.568995728543)
		self.assertEqual(self.bp.remboursement[11].cumul_echeances, 2603.4148367207877)
		self.assertEqual(self.bp.remboursement[11].cumul_interet, 177.84584099224458)
		self.assertEqual(self.bp.remboursement[11].echeance, 216.95123639339909)
		self.assertEqual(self.bp.remboursement[11].capital, 203.98720604288155)
		self.assertEqual(self.bp.remboursement[11].interet, 12.964030350517532)


	def test_resultat(self):
		self.bp.set_resultat()
		#print(self.bp.resultat[0])
		self.assertEqual(self.bp.resultat[0].annee, 1)
		self.assertEqual(self.bp.resultat[0].chiffre_affaire, 104000)
		self.assertEqual(self.bp.resultat[0].achat_marchandise, 64000)
		self.assertEqual(self.bp.resultat[0].variation_marchandise, -12000)
		self.assertEqual(self.bp.resultat[0].marge_commerciale, 52000)
		self.assertEqual(self.bp.resultat[0].frais, 5320)
		self.assertEqual(self.bp.resultat[0].impot, 1000)
		self.assertEqual(self.bp.resultat[0].investissement, 1000)
		self.assertEqual(self.bp.resultat[0].amortissement, 200)
		self.assertEqual(self.bp.resultat[0].capital, 50000)
		self.assertEqual(self.bp.resultat[0].salaire_brut, 24000)
		self.assertEqual(self.bp.resultat[0].salaire_net, 18720)
		self.assertEqual(self.bp.resultat[0].charges_salariales, 5280)
		self.assertEqual(self.bp.resultat[0].charges_patronales, 10800)
		self.assertEqual(self.bp.resultat[0].charges_sociales, 16080)
		self.assertEqual(self.bp.resultat[0].subvention_exploitation, 3000)
		self.assertEqual(self.bp.resultat[0].subvention_investissement, 5000)
		self.assertEqual(self.bp.resultat[0].amortissement_subventions, 625)
		self.assertEqual(self.bp.resultat[0].emprunt_echeances, 2603.4148367207877)
		self.assertEqual(self.bp.resultat[0].emprunt_capital, 2425.568995728543)
		self.assertEqual(self.bp.resultat[0].emprunt_interets, 177.84584099224458)
		self.assertEqual(self.bp.resultat[0].valeur_ajoutee, 49680)
		self.assertEqual(self.bp.resultat[0].excedent, 13880)
		self.assertEqual(self.bp.resultat[0].resultat_exploitation, 13680)
		self.assertEqual(self.bp.resultat[0].resultat_courant, 13502.154159007756)
		self.assertEqual(self.bp.resultat[0].produits_exceptionnels, 625)
		self.assertEqual(self.bp.resultat[0].impot_societes, 2119.0731238511635)
		self.assertEqual(self.bp.resultat[0].resultat_net, 12008.081035156592)
		self.assertEqual(self.bp.resultat[0].autofinancement, 11583.081035156592)

	def test_tresorerie(self):
		self.bp.set_tresorerie()
		#print(self.bp.tresorerie[11])
		self.assertEqual(self.bp.tresorerie[11].annee, 1)
		self.assertEqual(self.bp.tresorerie[11].mois, 12)
		self.assertEqual(self.bp.tresorerie[11].cumul_mois, 12)
		self.assertEqual(self.bp.tresorerie[11].mois_reel, 3)
		self.assertEqual(self.bp.tresorerie[11].annee_reelle, 2021)
		self.assertEqual(self.bp.tresorerie[11].ventes, 12480)
		self.assertEqual(self.bp.tresorerie[11].tva_ventes, 2080)
		self.assertEqual(self.bp.tresorerie[11].achats, 6240)
		self.assertEqual(self.bp.tresorerie[11].tva_achats, 1040)
		self.assertEqual(self.bp.tresorerie[11].chiffre_affaire, 10400)
		self.assertEqual(self.bp.tresorerie[11].chiffre_affaire_annuel, 104000)
		self.assertEqual(self.bp.tresorerie[11].variation_stock, 0)
		self.assertEqual(self.bp.tresorerie[11].cumul_stock, 12000)
		self.assertEqual(self.bp.tresorerie[11].apport, 0)
		self.assertEqual(self.bp.tresorerie[11].emprunt, 0)
		self.assertEqual(self.bp.tresorerie[11].remboursement, 216.95123639339897)
		self.assertEqual(self.bp.tresorerie[11].frais, 120)
		self.assertEqual(self.bp.tresorerie[11].tva_frais, 20)
		self.assertEqual(self.bp.tresorerie[11].salaires_net, 1560)
		self.assertEqual(self.bp.tresorerie[11].dettes_sociales, 1340)
		self.assertEqual(self.bp.tresorerie[11].charges_sociales, 1340)
		self.assertEqual(self.bp.tresorerie[11].investissement, 0)
		self.assertEqual(self.bp.tresorerie[11].tva_investissement, 0)
		self.assertEqual(self.bp.tresorerie[11].entrees, 12480)
		self.assertEqual(self.bp.tresorerie[11].sorties, 10496.951236393399)
		self.assertEqual(self.bp.tresorerie[11].solde_mensuel, 1983.048763606601)
		self.assertEqual(self.bp.tresorerie[11].solde_cumul, 65396.58516327923)
		self.assertEqual(self.bp.tresorerie[11].credit_tva, 0)
		self.assertEqual(self.bp.tresorerie[11].debit_tva, 1020)
		self.assertEqual(self.bp.tresorerie[11].tva, 1020)
		self.assertEqual(self.bp.tresorerie[11].creances_clients, 360)
		self.assertEqual(self.bp.tresorerie[11].dettes_fournisseurs, 120)
		self.assertEqual(self.bp.tresorerie[11].creances_fiscales, 0)
		self.assertEqual(self.bp.tresorerie[11].dettes_fiscales, 0)
		self.assertEqual(self.bp.tresorerie[11].cumul_dettes_sociales, 1340)
		self.assertEqual(self.bp.tresorerie[11].total_creances, 360)
		self.assertEqual(self.bp.tresorerie[11].variation_creances, 0)
		self.assertEqual(self.bp.tresorerie[11].total_dettes, 2480)
		self.assertEqual(self.bp.tresorerie[11].variation_dettes, 0)
		self.assertEqual(self.bp.tresorerie[11].bfr, 9880)
		self.assertEqual(self.bp.tresorerie[11].variation_bfr, 0)
		self.assertEqual(self.bp.tresorerie[11].variation_bfr_annuel, 9880)
		self.assertEqual(self.bp.tresorerie[11].bfr_jours_ca, 34.675000000000004)


if __name__ == '__main__':
	unittest.main()
